#!/bin/bash

# Abort the script at the first error
set -e
#  Causes a pipeline to return the exit status of the last command in the pipe that returned a non-zero return value.
set -o pipefail

COMMAND="$1"
if [ "$COMMAND" = "help" ] || [ "$COMMAND" = "" ]; then
  echo "Deployment Script"
  echo ""
  echo "Usage:"
  echo "  ./ctask command task-env-file-path"
  echo ""
  echo "Example:"
  echo "./ctask deploy ./deploy-dev.env"
  echo "./ctask deploy ./nodejs-sample/deploy/deploy-dev.env"
  echo ""
  echo "Available commands:"
  echo "  deploy - deploys the task to the specified environment"
  echo "  undeploy - undeploys the task from the specified environment"
  echo "  redeploy - same as undeplay && deploy"
  echo "  info - displays informatios for the task"
  echo "  publish - publish message"
  echo "  mock - deploy for custom public endpoint (may use ngrok)"
  echo "  unmock - undeploy for custom public endpoint"
  echo "  help - displays this help message"
  exit 0
fi

DEPLOY_DIR="$(dirname -- $(readlink -f "$0"))/deploy"
TASK_ENV_DIR=$(dirname -- $(readlink -f "$2"))
TASK_DIR=$(dirname -- "${TASK_ENV_DIR}")
TASK_ENV_FILE=$(basename -- "$2")

# Ctrl+C to exit
trap "echo The script is terminated; (popd >/dev/null); exit" SIGINT

# ENV file 내에서 경로를 상대경로로 명시하기 위해 pushd/popd 를 사용한다.
pushd "$TASK_ENV_DIR" >/dev/null
# 함수 로드
source "$DEPLOY_DIR/lib.sh"
# TASK_ENV_FILE 오버라이드
source "$TASK_ENV_FILE"

echo "* TASK_NAME: ${TASK_NAME:?required}"
echo "* CLOUDSDK_CORE_PROJECT: ${CLOUDSDK_CORE_PROJECT:?required}"
echo "* CLOUDSDK_RUN_REGION: ${CLOUDSDK_RUN_REGION:?required}"
echo "* CLOUDSDK_ARTIFACTS_LOCATION: ${CLOUDSDK_ARTIFACTS_LOCATION:=$CLOUDSDK_RUN_REGION}"

# gcp 리소스 이름...
CLOUD_RUN_PREFIX="run-cornerstone-"
TOPIC_PREFIX="topic-cornerstone-"
SUBSCRIPTION_PREFIX="sub-cornerstone-"
SCHEDULER_PREFIX="scheduler-cornerstone-"
CLOUD_RUN_NAME="${CLOUD_RUN_PREFIX}${TASK_NAME}"
TOPIC_NAME="${TOPIC_PREFIX}${TASK_NAME}"
SUBSCRIPTION_NAME="${SUBSCRIPTION_PREFIX}${TASK_NAME}"
DEAD_LETTER_TOPIC_NAME="${TOPIC_PREFIX}dead-letter"
DEAD_LETTER_SUBSCRIPTION_NAME="${SUBSCRIPTION_PREFIX}dead-letter"
SCHEDULER_NAME="${SCHEDULER_PREFIX}${TASK_NAME}"

# gcp 리소스에 공통 레이블을 붙임
GCLOUD_CLI_LABEL_OPTS="--labels=cornerstone=1"

# Docker Registry Host - Artifacts Registry 를 사용한다.
DOCKER_REGISTRY_HOST="${CLOUDSDK_ARTIFACTS_LOCATION}-docker.pkg.dev"
DOCKER_REGISTRY_PATH="${CLOUDSDK_CORE_PROJECT}/cornerstone-tasks"

# export for GCLOUD CLI
export CLOUDSDK_CORE_PROJECT CLOUDSDK_RUN_REGION CLOUDSDK_ARTIFACTS_LOCATION

if [ -f "$CLOUD_RUN_SERVICE_OVERRIDE_FILE" ]; then
  CLOUD_RUN_SERVICE_OVERRIDE_FILE=$(readlink -f "$CLOUD_RUN_SERVICE_OVERRIDE_FILE")
fi

if [ -f "$SUBSCRIPTION_FLAGS_FILE" ]; then
  SUBSCRIPTION_FLAGS_FILE=$(readlink -f "$SUBSCRIPTION_FLAGS_FILE")
fi

if [ -f "$SCHEDULER_FLAGS_FILE" ]; then
  echo "* X_CLOUDSDK_SCHEDULER_LOCATION: ${X_CLOUDSDK_SCHEDULER_LOCATION:=$CLOUDSDK_RUN_REGION}"
  SCHEDULER_FLAGS_FILE=$(readlink -f "$SCHEDULER_FLAGS_FILE")
fi

popd >/dev/null

pushd "$TASK_DIR" >/dev/null

shift
shift

if [ "$COMMAND" == "deploy" ]; then
  _deploy
elif [ "$COMMAND" == "undeploy" ] || [ "$COMMAND" == "unmock" ]; then
  _undeploy
elif [ "$COMMAND" == "redeploy" ]; then
  _undeploy
  _deploy
elif [ "$COMMAND" == "info" ]; then
  _info
elif [ "$COMMAND" == "publish" ]; then
  _publish "$@"
elif [ "$COMMAND" == "mock" ]; then
  _mock
else
  echo "Invalid command: $COMMAND"
  exit 1
fi
popd >/dev/null
