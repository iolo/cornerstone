plugins {
  id 'org.springframework.boot' version '2.7.0' apply false
  id 'io.spring.dependency-management' version '1.0.11.RELEASE'
  id 'io.freefair.lombok' version '6.4.3'
  id 'maven-publish'
  id 'java-library'
  //id 'commons-library'
}

group 'com.day1co.cornerstone'
version '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
  mavenCentral()
  maven {
    url = uri('https://maven.pkg.github.com/day1co/maven-repo')
    credentials {
      username = project.findProperty('gpr.user') ?: System.getenv('USERNAME')
      password = project.findProperty('gpr.key') ?: System.getenv('TOKEN')
    }
  }
}

dependencyManagement {
  imports {
    mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
    mavenBom 'com.google.cloud:libraries-bom:25.1.0'
  }
}

dependencies {
  implementation 'com.fasterxml.jackson.core:jackson-databind'
  implementation 'com.google.cloud:google-cloud-pubsub'
  implementation 'com.google.cloud:google-cloud-scheduler'
  implementation 'org.slf4j:slf4j-api'
  implementation 'org.springframework:spring-web'
  implementation 'org.springframework:spring-webmvc'
  testImplementation 'javax.servlet:javax.servlet-api'
  testImplementation 'org.assertj:assertj-core'
  testImplementation 'org.hamcrest:hamcrest'
  testImplementation 'org.junit.jupiter:junit-jupiter'
  testImplementation 'org.mockito:mockito-core'
  testImplementation 'org.slf4j:slf4j-simple'
  testImplementation 'org.springframework:spring-test'
}

tasks.named('test') {
  useJUnitPlatform()
}

java {
    //withJavadocJar()
    withSourcesJar()
}

publishing {
    repositories {
        maven {
            name = 'GitHubPackages'
            url = uri('https://maven.pkg.github.com/day1co/maven-repo')
            credentials {
                username = project.findProperty('gpr.user') ?: System.getenv('GITHUB_USERNAME')
                password = project.findProperty('gpr.key') ?: System.getenv('GITHUB_TOKEN')
            }
        }
    }
    publications {
        githubPackages(MavenPublication) {
            from(components.java)
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
        }
    }
}
